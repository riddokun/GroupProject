{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\"); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Daily Sales\n// #############################\n\nvar dailySalesChart = {\n  data: {\n    series: [12, 17, 7, 17, 23, 18, 38]\n  },\n  options: {\n    donut: true,\n    donutWidth: 10,\n    donutSolid: true,\n    startAngle: 270,\n    showLabel: true\n  },\n  // for animation\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Email Subscriptions\n// #############################\n\nvar emailsSubscriptionChart = {\n  data: {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [[\"screen and (max-width: 640px)\", {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function labelInterpolationFnc(value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\nvar completedTasksChart = {\n  data: {\n    labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n    series: [[230, 750, 450, 300, 280, 240, 200, 190]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 1000,\n    // we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  dailySalesChart: dailySalesChart,\n  emailsSubscriptionChart: emailsSubscriptionChart,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["C:\\Users\\reedk\\OneDrive\\Documents\\Tutoring\\Expense-Tracker-Group-Project3\\project-3\\client\\src\\variables\\charts.jsx"],"names":["Chartist","require","delays","durations","delays2","durations2","dailySalesChart","data","series","options","donut","donutWidth","donutSolid","startAngle","showLabel","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","emailsSubscriptionChart","labels","axisX","showGrid","low","high","chartPadding","top","right","bottom","left","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","lineSmooth","Interpolation","cardinal","tension","module","exports"],"mappings":"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","sourcesContent":["// ##############################\r\n// // // javascript library for creating charts\r\n// #############################\r\nvar Chartist = require(\"chartist\");\r\n\r\n// ##############################\r\n// // // variables used to create animation on charts\r\n// #############################\r\nvar delays = 80,\r\n  durations = 500;\r\nvar delays2 = 80,\r\n  durations2 = 500;\r\n\r\n// ##############################\r\n// // // Daily Sales\r\n// #############################\r\n\r\nconst dailySalesChart = {\r\n  data: {\r\n    series: [12, 17, 7, 17, 23, 18, 38]\r\n  },\r\n  options: {\r\n    donut: true,\r\n    donutWidth: 10,\r\n    donutSolid: true,\r\n    startAngle: 270,\r\n    showLabel: true\r\n  },\r\n  // for animation\r\n  animation: {\r\n    draw: function(data) {\r\n      if (data.type === \"line\" || data.type === \"area\") {\r\n        data.element.animate({\r\n          d: {\r\n            begin: 600,\r\n            dur: 700,\r\n            from: data.path\r\n              .clone()\r\n              .scale(1, 0)\r\n              .translate(0, data.chartRect.height())\r\n              .stringify(),\r\n            to: data.path.clone().stringify(),\r\n            easing: Chartist.Svg.Easing.easeOutQuint\r\n          }\r\n        });\r\n      } else if (data.type === \"point\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays,\r\n            dur: durations,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\"\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ##############################\r\n// // // Email Subscriptions\r\n// #############################\r\n\r\nconst emailsSubscriptionChart = {\r\n  data: {\r\n    labels: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"Mai\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\"\r\n    ],\r\n    series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\r\n  },\r\n  options: {\r\n    axisX: {\r\n      showGrid: false\r\n    },\r\n    low: 0,\r\n    high: 1000,\r\n    chartPadding: {\r\n      top: 0,\r\n      right: 5,\r\n      bottom: 0,\r\n      left: 0\r\n    }\r\n  },\r\n  responsiveOptions: [\r\n    [\r\n      \"screen and (max-width: 640px)\",\r\n      {\r\n        seriesBarDistance: 5,\r\n        axisX: {\r\n          labelInterpolationFnc: function(value) {\r\n            return value[0];\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  ],\r\n  animation: {\r\n    draw: function(data) {\r\n      if (data.type === \"bar\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays2,\r\n            dur: durations2,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\"\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ##############################\r\n// // // Completed Tasks\r\n// #############################\r\n\r\nconst completedTasksChart = {\r\n  data: {\r\n    labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\r\n    series: [[230, 750, 450, 300, 280, 240, 200, 190]]\r\n  },\r\n  options: {\r\n    lineSmooth: Chartist.Interpolation.cardinal({\r\n      tension: 0\r\n    }),\r\n    low: 0,\r\n    high: 1000, // we recommend you to set the high sa the biggest value + something for a better look\r\n    chartPadding: {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0\r\n    }\r\n  },\r\n  animation: {\r\n    draw: function(data) {\r\n      if (data.type === \"line\" || data.type === \"area\") {\r\n        data.element.animate({\r\n          d: {\r\n            begin: 600,\r\n            dur: 700,\r\n            from: data.path\r\n              .clone()\r\n              .scale(1, 0)\r\n              .translate(0, data.chartRect.height())\r\n              .stringify(),\r\n            to: data.path.clone().stringify(),\r\n            easing: Chartist.Svg.Easing.easeOutQuint\r\n          }\r\n        });\r\n      } else if (data.type === \"point\") {\r\n        data.element.animate({\r\n          opacity: {\r\n            begin: (data.index + 1) * delays,\r\n            dur: durations,\r\n            from: 0,\r\n            to: 1,\r\n            easing: \"ease\"\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  dailySalesChart,\r\n  emailsSubscriptionChart,\r\n  completedTasksChart\r\n};\r\n"]},"metadata":{},"sourceType":"module"}